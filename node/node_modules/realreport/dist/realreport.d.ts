/// <reference types="node" />
/** 
* RealReport v0.1.2
* commit --
HEAD

* Copyright (C) 2013-2022 WooriTech Inc.
	https://real-report.com
* All Rights Reserved.
*/

/**
 * ReportViewer base class
 */
declare class ReportViewBase {
    protected cm: boolean;
    constructor();
}

interface PdfFont {
    file: string;
    name: string;
    content: string;
    style?: 'normal' | 'italic';
    weight?: 'normal' | 'bold';
}

declare enum CCITTScheme {
    GROUP_3 = "g3",
    GROUP_3_2D = "g3-2d",
    GROUP_4 = "g4"
}

interface ITiffOptions {
    dpi?: number;
    grayscale?: boolean;
    encoding?: CCITTScheme;
}

interface ImageExportOptions {
    type?: 'png' | 'jpeg' | 'jpg' | 'gif' | 'tif' | 'tiff';
    fileName?: string;
    zipName?: string;
    tiff?: ITiffOptions;
}

interface DocExportOptions {
    type: 'hwp' | 'docx';
    fileName?: string;
}

/**
 * RealReport Viewer
 */
declare class ReportViewer extends ReportViewBase {
    private _container;
    private _reportSource?;
    private _dataSet?;
    private _report;
    private _reportData;
    constructor(container: string | HTMLDivElement, reportSource?: any, dataSet?: any, options?: ReportOptions);
    get zoom(): number;
    set zoom(v: number);
    get pageCount(): number;
    get page(): number;
    set page(v: number);
    get reportSource(): any;
    set reportSource(v: any);
    get dataSet(): any;
    set dataSet(v: any);
    get reportHtml(): string;
    /**
     * container에 리포트를 preview로 렌더링 합니다.
     */
    preview(): void;
    getHtml(): string;
    first(): void;
    prev(): void;
    next(): void;
    last(): void;
    zoomIn(scale?: number): void;
    zoomOut(scale?: number): void;
    fitToHeight(): void;
    fitToPage(): void;
    fitToWidth(): void;
    /**
     * PDF 내보내기 함수
     * @param fonts
     */
    exportPdf(fonts: PdfFont[]): void;
    /**
     * 이미지 내보내기 함수
     * @param imageOptions
     */
    exportImage(imageOptions?: ImageExportOptions): void;
    /**
     * 문서 내보내기 함수
     * @param documentOptions
     */
    exportDocument(documentOptions?: DocExportOptions): void;
    /** --------------- */
    /** PRIVATE METHODS */
    /** --------------- */
    private _checkPrintContainer;
    private _checkReport;
}

interface ReportData {
    type: 'simple' | 'band';
    values: Object[] | Object;
}
interface ReportDataCollection {
    [name: string]: ReportData;
}
interface ReportOptions {
    zoom: number;
}

export { ReportData, ReportDataCollection, ReportOptions, ReportViewer };
